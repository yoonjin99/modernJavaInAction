package com.example.modernJavaInAction.part3.chapter9;

public class Refactoring {
    /*
    * 코드 가독성 개선
    * 어떤 코드를 다른 사람도 쉽게 이해할 수 있음을 의미.
    * 1. 익명 클래스를 람다 표현식으로 리팩토링 하기
    * 2. 람다 표현식을 메서드 참조로 리팩토링 하기
    * 3. 명령형 데이터 처리를 스트림으로 리팩토링 하기
    * */

    /*
    * 람다 표현식으로 기존의 많은 객체지향 디자인 패턴을 제거하거나 간결하게 재구현 가능
    * */

    /*전략
    * 런타임에 적절한 알고리즘을 선택하는 기법
    * */
    public void strategyTest(){
        Validator numericValidator = new Validator((String s) -> s.matches("[a-z]+"));
        boolean b1 = numericValidator.validate("aaaaaa"); // 람다를 전달.
        // 새로운 클래스를 구현할 필요 없이 람다 표현식을 직접 전달하면 코드가 간결해짐.
    }
    /*템플릿메서드
    * 알고리즘 개요를 제시한 다음에 알고리즘의 일부를 고칠 수 있는 유연함을 제공해야 할 때 사용
    * */
    /*옵저버
    * 어떤 이벤트가 발생했을 대 객체가 다른 객체 리스트에 자동으로 알림을 보내야 하는 상황에서 사용.
    * */
    /*의무체인
    * 한 객체가 어떤 작업을 처리한 다음에 다른 객체로 결과 전달, 다른 객체도 해야할 작업을 전달 하는 식.
    * */
    /*팩토리
    * 인스턴스화 로직을 클라이언트에 노출하지 않고 객체를 만들 때 팩토리 디자인 패턴을 사용.
    * */
}

